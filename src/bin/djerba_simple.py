#! /usr/bin/env python3

# Simplified djerba script for CGI reports only
# - supply input config
# - read inputs
# - collate results; transform from input-major to gene-major order
# - write JSON output

import argparse
import sys

sys.path.pop(0) # do not import from script directory
from djerba.simple.runner import runner

def get_parser():
    """Construct the parser for command-line arguments"""
    parser = argparse.ArgumentParser(
        description='djerba_simple: A tool for making bioinformatics clinical reports'
    )
    parser.add_argument(
        '-b', '--bed', metavar='PATH', required=True,
        help='BED interval file for TMB calculation'
    )
    parser.add_argument('-d', '--donor', metavar='ID', required=True, help='Donor ID')
    parser.add_argument(
        '-g', '--gamma', metavar='NUM', default=None,
        help='Sequenza gamma parameter; if not given, will be selected automatically')
    # TODO replace the INI file with a method to find and configure inputs
    parser.add_argument(
        '-i', '--ini', metavar='PATH', required=True,
        help='INI file generated by CGI-Tools script'
    )
    parser.add_argument('-o', '--out', metavar='PATH', required=True, help='JSON output path')
    parser.add_argument('-p', '--project', metavar='ID', required=True, help='Project ID')
    parser.add_argument(
        '-r', '--provenance', metavar='PATH', required=True,
        help='TSV.GZ provenance report file'
    )
    parser.add_argument(
        '-s', '--schema', metavar='PATH', required=True,
        help='JSON schema file for validating output'
    )
    parser.add_argument(
        '-w', '--work-dir', metavar='DIR', required=True,
        help='Path to directory in which to write intermediate output files'
    )
    return parser

def main(args):
    donor = args.donor
    ini_path = args.ini
    bed_path = args.bed
    gamma = args.gamma
    out_path = args.out
    project = args.project
    provenance = args.provenance
    schema_path = args.schema
    r_script_dir = None
    work_dir = args.work_dir
    runner(provenance,
           project,
           donor,
           bed_path,
           ini_path,
           work_dir,
           out_path,
           schema_path,
           r_script_dir,
           gamma).run()

if __name__ == '__main__':
    parser = get_parser()
    if len(sys.argv) == 1:
        parser.print_help(sys.stderr)
        sys.exit(1)
    main(parser.parse_args())
